image: alpine:latest

variables:
  DOCKER_DRIVER: overlay2

stages:
  - bootstrap
  - build
  - test
  - build_docker_image
  - deploy
  - staging
  - production

build:
  stage: build
  image: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:build
  script:
    - ls -lGha
    - CARGO_HOME="$(pwd)/cargo_home" cargo build --release
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cargo_home/
      - target/

build_docker_image:
  stage: build_docker_image
  image: "registry.gitlab.com/gitlab-org/cluster-integration/auto-build-image/master:stable"
  services:
    - docker:stable-dind
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" "$CI_REGISTRY"
    - sed -i "s#%deploy_image%#$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:deploy#" Dockerfile
    - docker build --tag "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG" .
    - docker push "$CI_APPLICATION_REPOSITORY:$CI_APPLICATION_TAG"
  only:
    - branches
    - tags

test:
  stage: test
  image: $CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG:build
  script:
    - CARGO_HOME="$(pwd)/cargo_home" cargo test --release
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - cargo_home/
      - target/

staging:
  stage: staging
  image: fedora # Because it has curl
  when: manual
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - curl --data "name=staging&port=5000&image=${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}&token=${DEPLOY_TOKEN}&" ${DEPLOY_ENDPOINT}

production:
  stage: production
  image: fedora # Because it has curl
  when: manual
  script:
    - |
      if [[ -z "$CI_COMMIT_TAG" ]]; then
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE/$CI_COMMIT_REF_SLUG}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_SHA}
      else
        export CI_APPLICATION_REPOSITORY=${CI_APPLICATION_REPOSITORY:-$CI_REGISTRY_IMAGE}
        export CI_APPLICATION_TAG=${CI_APPLICATION_TAG:-$CI_COMMIT_TAG}
      fi
    - curl --data "name=production&port=5001&image=${CI_APPLICATION_REPOSITORY}:${CI_APPLICATION_TAG}&token=${DEPLOY_TOKEN}&" ${DEPLOY_ENDPOINT}

bootstrap:
  image: docker:stable
  stage: bootstrap
  when: manual
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - ./build_bootstrap.sh

create_base_deploy_image:
  image: docker:stable
  stage: bootstrap
  when: manual
  allow_failure: true
  services:
    - docker:stable-dind
  script:
    - ./build_deploy.sh